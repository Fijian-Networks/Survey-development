return(questions)
}
# function to generate all responses for single person, including male female logic.
generate.person_responses <- function (household_index, sex) {
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex))) %>% generate.metadata() #generate participant
q.friends <- generate.potential_friends(household_index) # collect all persons not living in household
no_close.friends <- sample(3,1) + 2   # random number of close friends
no_outlier.friends <- sample(3,1) + 1 # random number of outliers
total_no.friends <- no_close.friends + no_outlier.friends # total number of friends for iteration
table.friends <- q.friends[sample(nrow(q.friends), total_no.friends),] # select random persons as friends
friends.probablity <<- c(rep(1,no_close.friends), rep(0.3,no_outlier.friends)) # set probability for closer friends, GLOBAL VARIABLE
# cq1-4
cq1 <- generate.list_based_questions(table.friends, "cq1")
cq2 <- generate.cq2_and_3(table.friends,2)
cq3 <- generate.cq2_and_3(table.friends,3)
cq4 <- generate.list_based_questions(table.friends, "cq4")
# male or female questions, and join onto response_table.sex
if(sex == "m"){
cqm1 <- generate.list_based_questions(table.friends, "cqm1")
cqm2 <- generate.list_based_questions(table.friends, "cqm2")
response_table.sex <- response_table %>% replace_na(cqm1) %>% replace_na(cqm2)
} else if(sex == "f") {
cqf1 <- generate.list_based_questions(table.friends, "cqf1")
cqf2 <- generate.general_name_id(table.friends, "cqf2")
response_table.sex <- response_table %>% replace_na(cqf1) %>% replace_na(cqf2)
} else{
print("no sex assigned to entry")
}
#snq1-4
qsnq1 <- generate.general_name_id(table.friends, "snq1")
qsnq2 <- generate.general_name_id(table.friends, "snq2")
qsnq3 <- generate.general_name_id(table.friends, "snq3")
qsnq4 <- generate.general_name_id(table.friends, "snq4")
# bring all responses into table...
# This is gonna be ugly.
output <- response_table.sex %>% replace_na(cq1) %>% replace_na(cq2) %>% replace_na(cq3) %>% replace_na(cq4) %>% replace_na(qsnq1) %>% replace_na(qsnq2) %>% replace_na(qsnq3) %>% replace_na(qsnq4)
return(output)
}
generate.household_member_list <-  function(household_index){
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC',sep='')
household_member_list<- dbGetQuery(db, query)
household_member_list <- generate.religion_for_household(household_member_list)
return(household_member_list)
}
generate.all_households <- function(){
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
responses <- generate.participant_response.empty()
i <- 1
r <- 1
while(i<= nrow(household_id_list)){
household_member_list <- generate.household_member_list(i)
#extract oldest male and female from list
household_member_list <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
m_response <- generate.person_responses(i,"m")
f_response <- generate.person_responses(i,"f")
responses[r,] <- m_response
responses[r+1,] <- f_response
i <- i + 1
r <- r+2
}
return(responses)
}
# COMPLETED PROCESS:
t <- generate.all_households()
f_response <- generate.person_responses(i,"f")
generate.all_households <- function(){
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
responses <- generate.participant_response.empty()
i <- 1
r <- 1
while(i<= nrow(household_id_list)){
household_member_list <- generate.household_member_list(i)
#extract oldest male and female from list
household_member_list <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
m_response <- generate.person_responses(i,"m")
f_response <- generate.person_responses(i,"f")
responses[r,] <- m_response
responses[r+1,] <- f_response
i <- i + 1
r <- r+2
}
return(responses)
}
# COMPLETED PROCESS:
t <- generate.all_households()
# COMPLETED PROCESS:
t <- generate.all_households()
t <- generate.all_households()
# input: empty table, sex ("m" or "f")
generate.participant_response.info <- function(.data, sex) {
household_member_list <- generate.household_member_list()
household_head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
if(sex == "m"){i <- 1} else if(sex =="f") {i <- 2} else {print("type m or f")}
participant.info <-  as_tibble(household_head_and_spouse[i,]) %>% select(-c(age, household_id))
# merge head_of_Household using fields as columns
# rename columns to be same as field names
# .data[1,] is the empty table, assigning to row one
participant.info.table <- .data[1,] %>% mutate(participant_uuid = participant.info$`_id`,participant_fullname = participant.info$name, participant_sex = participant.info$sex, participant_location = participant.info$village, participant_religion_upbringing = participant.info$religion)
return(participant.info.table)
}
o
o
# input: empty table, sex ("m" or "f")
generate.participant_response.info <- function(.data, sex) {
household_member_list <- generate.household_member_list()
household_head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
if(sex == "m"){i <- 1} else if(sex =="f") {i <- 2} else {print("type m or f")}
participant.info <-  as_tibble(household_head_and_spouse[i,]) %>% select(-c(age, household_id))
# merge head_of_Household using fields as columns
# rename columns to be same as field names
# .data[1,] is the empty table, assigning to row one
participant.info.table <- .data[1,] %>% mutate(participant_uuid = participant.info$`_id`,participant_fullname = participant.info$name, participant_sex = participant.info$sex, participant_location = participant.info$village, participant_religion_upbringing = participant.info$religion)
return(participant.info.table)
}
generate.potential_friends <-  function(household_index) {
get_friends_query <- query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "age" > 20 AND "household_id" != "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC', sep='')
return(as_tibble(dbGetQuery(db, query)))
}
generate.list_based_questions <- function (friend_table, q) {
if(q =="cq1"){
# household items
item_list <- c("pots", "bowls", "chairs", "cutlery", "sugar", "pillows", "mattress", "computer", "batteries", "blankets")
} else if(q == "cq4"){
# food
item_list <- c("taro", "meat", "fish", "cassava", "fruit", "shellfish", "grains", "special treat", "bread", "potatoes")
} else if(q == "cqm1"){
# labour Male
item_list <- c("planting", "roof raising", "gathering materials", "transportmaterials", "repairs")
} else if(q == "cqm2") {
# food funeral/wedding
item_list <- c("kava", "pigs", "cow", "asparagus rolls", "taro", "fruit", "fish", "shellfish")
} else if(q == "cqf1") {
# tasks Female
item_list <- c("cleaning", "laundry", "water", "cooking", "shifting", "childcare", "dishes")
} else {
print("enter question code to generate answers")
return()
}
questions <- as_tibble(generate.participant_response.empty() %>% select(starts_with("{{q}}"))) # create empty tibble of all questions
# random no of samples, from 1 - 5
number_of_responses <- sample(4,1, prob = c(0.2,0.3,0.3,0.2)) +1
i = 1
while(i <= number_of_responses){
person <- friend_table[sample(nrow(friend_table), 1, prob = friends.probablity),]   # get randomly chosen friends details
item <- item_list[sample(length(item_list), 1)]  # randomly select item from list
# populates 1 set of answers, use of dply variables here {i}
questions <- questions[1,] %>% mutate( "{q}_{i}_name" := person$name , "{q}_{i}_item" := item, "{q}_{i}_uuid" := person$`_id`)
i <- i+1
}
return(questions)
}
generate.cq2_and_3 <- function (friend_table, q) {
# amount of money from question parameter.
if(q == 2){
amount_max <- 20
amount_min <- 0
} else if(q==3){
amount_max <- 100
amount_min <- 20
}
questions <- as_tibble(generate.participant_response.empty() %>% select(starts_with("cq{{q}}"))) # create empty tibble of all questions
number_of_responses <- sample(4,1, prob = c(0.5,0.3,0.1,0.1)) + 1
i = 1
while(i <= number_of_responses){
person <- friend_table[sample(nrow(friend_table), 1, prob = friends.probablity),]   # get randomly chosen friends details
amount <- sample(amount_max,1) + amount_min
questions <- questions[1,] %>% mutate( "cq{q}_{i}_name" := person$name , "cq{q}_{i}_amount" := amount, "cq{q}_{i}_uuid" := person$`_id`)
i <- i+1
}
return(questions)
}
generate.general_name_id <- function (friend_table, q) {
questions <- as_tibble(generate.participant_response.empty() %>% select(starts_with("{{q}}"))) # create empty tibble of all questions
number_of_responses <- sample(4,1, prob = c(0.5,0.3,0.1,0.1)) + 1
i = 1
while(i <= number_of_responses){
person <- friend_table[sample(nrow(friend_table), 1, prob = friends.probablity),]   # get randomly chosen friends details
questions <- questions[1,] %>% mutate( "{q}_{i}_name" := person$name , "{q}_{i}_uuid" := person$`_id`)
i <- i+1
}
return(questions)
}
# function to generate all responses for single person, including male female logic.
generate.person_responses <- function (household_index, sex) {
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex))) %>% generate.metadata() #generate participant
q.friends <- generate.potential_friends(household_index) # collect all persons not living in household
no_close.friends <- sample(3,1) + 2   # random number of close friends
no_outlier.friends <- sample(3,1) + 1 # random number of outliers
total_no.friends <- no_close.friends + no_outlier.friends # total number of friends for iteration
table.friends <- q.friends[sample(nrow(q.friends), total_no.friends),] # select random persons as friends
friends.probablity <<- c(rep(1,no_close.friends), rep(0.3,no_outlier.friends)) # set probability for closer friends, GLOBAL VARIABLE
# cq1-4
cq1 <- generate.list_based_questions(table.friends, "cq1")
cq2 <- generate.cq2_and_3(table.friends,2)
cq3 <- generate.cq2_and_3(table.friends,3)
cq4 <- generate.list_based_questions(table.friends, "cq4")
# male or female questions, and join onto response_table.sex
if(sex == "m"){
cqm1 <- generate.list_based_questions(table.friends, "cqm1")
cqm2 <- generate.list_based_questions(table.friends, "cqm2")
response_table.sex <- response_table %>% replace_na(cqm1) %>% replace_na(cqm2)
} else if(sex == "f") {
cqf1 <- generate.list_based_questions(table.friends, "cqf1")
cqf2 <- generate.general_name_id(table.friends, "cqf2")
response_table.sex <- response_table %>% replace_na(cqf1) %>% replace_na(cqf2)
} else{
print("no sex assigned to entry")
}
#snq1-4
qsnq1 <- generate.general_name_id(table.friends, "snq1")
qsnq2 <- generate.general_name_id(table.friends, "snq2")
qsnq3 <- generate.general_name_id(table.friends, "snq3")
qsnq4 <- generate.general_name_id(table.friends, "snq4")
# bring all responses into table...
# This is gonna be ugly.
output <- response_table.sex %>% replace_na(cq1) %>% replace_na(cq2) %>% replace_na(cq3) %>% replace_na(cq4) %>% replace_na(qsnq1) %>% replace_na(qsnq2) %>% replace_na(qsnq3) %>% replace_na(qsnq4)
return(output)
}
generate.household_member_list <-  function(household_index){
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC',sep='')
household_member_list<- dbGetQuery(db, query)
household_member_list <- generate.religion_for_household(household_member_list)
return(household_member_list)
}
generate.all_households <- function(){
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
responses <- generate.participant_response.empty()
i <- 1
r <- 1
while(i<= nrow(household_id_list)){
household_member_list <- generate.household_member_list(i)
#extract oldest male and female from list
household_member_list <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
m_response <- generate.person_responses(i,"m")
f_response <- generate.person_responses(i,"f")
responses[r,] <- m_response
responses[r+1,] <- f_response
i <- i + 1
r <- r+2
}
return(responses)
}
# COMPLETED PROCESS:
t <- generate.all_households()
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
setwd("/Users/admin/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation")
library("DBI")
library("uuid")
library("randomNames")
library("RSQLite")
library("tidyverse")
#############################################
# Initialisation step
#############################################
# connect to db
db <- dbConnect(RSQLite::SQLite(), "sqlite.db")
# get list of all household IDs, saved in array, accessed by index
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[1,], '" ORDER BY "sex" DESC, "age" DESC',sep='')
household_member_list<- dbGetQuery(db, query)
household_member_list <- generate.religion_for_household(household_member_list)
household_head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
generate.religion_for_household <- function(member_list){
member_list$religion ="" #create or clear field
religions <- list("methodist", "catholic", "anglican") # create list of possible religions
member_list$religion = toString(sample(religions,1))
return(member_list)
}
# get all fields from social network table in main database
field_list <- as.list(dbListFields(db, "social_network"))
# generate uuid
generate.uuid <- function() {return(paste("uuid:",uuid::UUIDgenerate(use.time = TRUE), sep = ""))}
rm(list = ls())
rm(list = ls())
rm(list = ls())
ls()
rm(list = ls(all))
rm db
rm (dm)
rm (db)
View(db)
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/1-sqlite_create-entries.R", echo=TRUE)
rm(list = ls())
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
generate.all_households <- function(){
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
responses <- generate.participant_response.empty()
i <- 1
r <- 1
while(i<= nrow(household_id_list)){
household_member_list <- generate.household_member_list(i)
#extract oldest male and female from list
household_member_list <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
m_response <- generate.person_responses(i,"m")
f_response <- generate.person_responses(i,"f")
responses[r,] <- m_response
responses[r+1,] <- f_response
i <- i + 1
r <- r+2
}
return(responses)
}
# COMPLETED PROCESS:
t <- generate.all_households()
# COMPLETED PROCESS:
t <- generate.all_households()
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC', sep='')
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC', sep='')
household_member_list<- dbGetQuery(db, query)
household_member_list <- generate.religion_for_household(household_member_list)
return(household_member_list)
generate.household_member_list <-  function(household_index){
query <- paste('SELECT "_id", "name", "age", "sex", "village", "household_id" FROM household_member WHERE "household_id" = "', household_id_list[household_index,], '" ORDER BY "age" DESC, "sex" DESC', sep='')
household_member_list<- dbGetQuery(db, query)
household_member_list <- generate.religion_for_household(household_member_list)
return(household_member_list)
}
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
household_member_list <- generate.household_member_list()
# input: empty table, sex ("m" or "f")
generate.participant_response.info <- function(.data, sex) {
household_member_list <- generate.household_member_list()
household_head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
if(sex == "m"){i <- 1} else if(sex =="f") {i <- 2} else {print("type m or f")}
participant.info <-  as_tibble(household_head_and_spouse[i,]) %>% select(-c(age, household_id))
# merge head_of_Household using fields as columns
# rename columns to be same as field names
# .data[1,] is the empty table, assigning to row one
participant.info.table <- .data[1,] %>% mutate(participant_uuid = participant.info$`_id`,participant_fullname = participant.info$name, participant_sex = participant.info$sex, participant_location = participant.info$village, participant_religion_upbringing = participant.info$religion)
return(participant.info.table)
}
generate.household_member_list()
generate.household_member_list(1)
debugSource("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex))) %>% generate.metadata() #generate participant
# function to generate all responses for single person, including male female logic.
generate.person_responses <- function (household_index, sex) {
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex))) %>% generate.metadata() #generate participant
q.friends <- generate.potential_friends(household_index) # collect all persons not living in household
no_close.friends <- sample(3,1) + 2   # random number of close friends
no_outlier.friends <- sample(3,1) + 1 # random number of outliers
total_no.friends <- no_close.friends + no_outlier.friends # total number of friends for iteration
table.friends <- q.friends[sample(nrow(q.friends), total_no.friends),] # select random persons as friends
friends.probablity <<- c(rep(1,no_close.friends), rep(0.3,no_outlier.friends)) # set probability for closer friends, GLOBAL VARIABLE
# cq1-4
cq1 <- generate.list_based_questions(table.friends, "cq1")
cq2 <- generate.cq2_and_3(table.friends,2)
cq3 <- generate.cq2_and_3(table.friends,3)
cq4 <- generate.list_based_questions(table.friends, "cq4")
# male or female questions, and join onto response_table.sex
if(sex == "m"){
cqm1 <- generate.list_based_questions(table.friends, "cqm1")
cqm2 <- generate.list_based_questions(table.friends, "cqm2")
response_table.sex <- response_table %>% replace_na(cqm1) %>% replace_na(cqm2)
} else if(sex == "f") {
cqf1 <- generate.list_based_questions(table.friends, "cqf1")
cqf2 <- generate.general_name_id(table.friends, "cqf2")
response_table.sex <- response_table %>% replace_na(cqf1) %>% replace_na(cqf2)
} else{
print("no sex assigned to entry")
}
#snq1-4
qsnq1 <- generate.general_name_id(table.friends, "snq1")
qsnq2 <- generate.general_name_id(table.friends, "snq2")
qsnq3 <- generate.general_name_id(table.friends, "snq3")
qsnq4 <- generate.general_name_id(table.friends, "snq4")
# bring all responses into table...
# This is gonna be ugly.
output <- response_table.sex %>% replace_na(cq1) %>% replace_na(cq2) %>% replace_na(cq3) %>% replace_na(cq4) %>% replace_na(qsnq1) %>% replace_na(qsnq2) %>% replace_na(qsnq3) %>% replace_na(qsnq4)
return(output)
}
# function to generate all responses for single person, including male female logic.
generate.person_responses <- function (household_index, sex, household_index) {
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex)),household_index) %>% generate.metadata() #generate participant
q.friends <- generate.potential_friends(household_index) # collect all persons not living in household
no_close.friends <- sample(3,1) + 2   # random number of close friends
no_outlier.friends <- sample(3,1) + 1 # random number of outliers
total_no.friends <- no_close.friends + no_outlier.friends # total number of friends for iteration
table.friends <- q.friends[sample(nrow(q.friends), total_no.friends),] # select random persons as friends
friends.probablity <<- c(rep(1,no_close.friends), rep(0.3,no_outlier.friends)) # set probability for closer friends, GLOBAL VARIABLE
# cq1-4
cq1 <- generate.list_based_questions(table.friends, "cq1")
cq2 <- generate.cq2_and_3(table.friends,2)
cq3 <- generate.cq2_and_3(table.friends,3)
cq4 <- generate.list_based_questions(table.friends, "cq4")
# male or female questions, and join onto response_table.sex
if(sex == "m"){
cqm1 <- generate.list_based_questions(table.friends, "cqm1")
cqm2 <- generate.list_based_questions(table.friends, "cqm2")
response_table.sex <- response_table %>% replace_na(cqm1) %>% replace_na(cqm2)
} else if(sex == "f") {
cqf1 <- generate.list_based_questions(table.friends, "cqf1")
cqf2 <- generate.general_name_id(table.friends, "cqf2")
response_table.sex <- response_table %>% replace_na(cqf1) %>% replace_na(cqf2)
} else{
print("no sex assigned to entry")
}
#snq1-4
qsnq1 <- generate.general_name_id(table.friends, "snq1")
qsnq2 <- generate.general_name_id(table.friends, "snq2")
qsnq3 <- generate.general_name_id(table.friends, "snq3")
qsnq4 <- generate.general_name_id(table.friends, "snq4")
# bring all responses into table...
# This is gonna be ugly.
output <- response_table.sex %>% replace_na(cq1) %>% replace_na(cq2) %>% replace_na(cq3) %>% replace_na(cq4) %>% replace_na(qsnq1) %>% replace_na(qsnq2) %>% replace_na(qsnq3) %>% replace_na(qsnq4)
return(output)
}
# function to generate all responses for single person, including male female logic.
generate.person_responses <- function (household_index, sex) {
# init values
response_table <- generate.participant_response.empty() %>% generate.participant_response.info(toString(toString(sex)),household_index) %>% generate.metadata() #generate participant
q.friends <- generate.potential_friends(household_index) # collect all persons not living in household
no_close.friends <- sample(3,1) + 2   # random number of close friends
no_outlier.friends <- sample(3,1) + 1 # random number of outliers
total_no.friends <- no_close.friends + no_outlier.friends # total number of friends for iteration
table.friends <- q.friends[sample(nrow(q.friends), total_no.friends),] # select random persons as friends
friends.probablity <<- c(rep(1,no_close.friends), rep(0.3,no_outlier.friends)) # set probability for closer friends, GLOBAL VARIABLE
# cq1-4
cq1 <- generate.list_based_questions(table.friends, "cq1")
cq2 <- generate.cq2_and_3(table.friends,2)
cq3 <- generate.cq2_and_3(table.friends,3)
cq4 <- generate.list_based_questions(table.friends, "cq4")
# male or female questions, and join onto response_table.sex
if(sex == "m"){
cqm1 <- generate.list_based_questions(table.friends, "cqm1")
cqm2 <- generate.list_based_questions(table.friends, "cqm2")
response_table.sex <- response_table %>% replace_na(cqm1) %>% replace_na(cqm2)
} else if(sex == "f") {
cqf1 <- generate.list_based_questions(table.friends, "cqf1")
cqf2 <- generate.general_name_id(table.friends, "cqf2")
response_table.sex <- response_table %>% replace_na(cqf1) %>% replace_na(cqf2)
} else{
print("no sex assigned to entry")
}
#snq1-4
qsnq1 <- generate.general_name_id(table.friends, "snq1")
qsnq2 <- generate.general_name_id(table.friends, "snq2")
qsnq3 <- generate.general_name_id(table.friends, "snq3")
qsnq4 <- generate.general_name_id(table.friends, "snq4")
# bring all responses into table...
# This is gonna be ugly.
output <- response_table.sex %>% replace_na(cq1) %>% replace_na(cq2) %>% replace_na(cq3) %>% replace_na(cq4) %>% replace_na(qsnq1) %>% replace_na(qsnq2) %>% replace_na(qsnq3) %>% replace_na(qsnq4)
return(output)
}
rm(list= ls())
debugSource("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
generate.all_households <- function(){
household_id_list <- dbGetQuery(db, "SELECT household_id FROM household_census")
responses <- generate.participant_response.empty()
i <- 1
r <- 1
while(i<= nrow(household_id_list)){
household_member_list <- generate.household_member_list(i)
#extract oldest male and female from list
household_member_list.head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
m_response <- generate.person_responses(i,"m")
f_response <- generate.person_responses(i,"f")
responses[r,] <- m_response
responses[r+1,] <- f_response
i <- i + 1
r <- r+2
}
return(responses)
}
debugSource("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
debugSource("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
# input: empty table, sex ("m" or "f")
generate.participant_response.info <- function(.data, sex, household_index) {
## generate household members list and filter out head and spouse
household_head_and_spouse <- generate.household_member_list(household_index)[match(unique(household_member_list$sex),household_member_list$sex),]
if(sex == "m"){i <- 1} else if(sex =="f") {i <- 2} else {print("type m or f")}
participant.info <-  as_tibble(household_head_and_spouse[i,]) %>% select(-c(age, household_id)) # head and spouse needed...
# merge head_of_Household using fields as columns
# rename columns to be same as field names
# .data[1,] is the empty table, assigning to row one
participant.info.table <- .data[1,] %>% mutate(participant_uuid = participant.info$`_id`,participant_fullname = participant.info$name, participant_sex = participant.info$sex, participant_location = participant.info$village, participant_religion_upbringing = participant.info$religion)
return(participant.info.table)
}
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
# input: empty table, sex ("m" or "f")
generate.participant_response.info <- function(.data, sex, household_index) {
## generate household members list and filter out head and spouse
household_member_list <- generate.household_member_list(household_index)
household_head_and_spouse <- household_member_list[match(unique(household_member_list$sex),household_member_list$sex),]
if(sex == "m"){i <- 1} else if(sex =="f") {i <- 2} else {print("type m or f")}
participant.info <-  as_tibble(household_head_and_spouse[i,]) %>% select(-c(age, household_id)) # head and spouse needed...
# merge head_of_Household using fields as columns
# rename columns to be same as field names
# .data[1,] is the empty table, assigning to row one
participant.info.table <- .data[1,] %>% mutate(participant_uuid = participant.info$`_id`,participant_fullname = participant.info$name, participant_sex = participant.info$sex, participant_location = participant.info$village, participant_religion_upbringing = participant.info$religion)
return(participant.info.table)
}
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
View(t)
#!#!#!#!#!#!#!#!#!##!#!#!#!#!#!#!#!#!##!#!#!#!#!#!#!#!#!##!#!#!#!#!#!#!#!#!##!#!#!##!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!
# then insert into DB with dbAppendTable()
dbAppendTable(db, "social_network", t)
rm(list = ls())
source("~/Documents/SHAVER_NETWORK/cohesionAndConflict/test data generation/4_sqlite_SNA-list.R", echo=TRUE)
# then insert into DB with dbAppendTable()
dbAppendTable(db, "social_network", t)
setwd(dirname(getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
