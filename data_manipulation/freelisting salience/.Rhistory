FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX")
FL.salience <- CalculateSalience(FL.csv.tidy)
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX")
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
View(FL.salience.villageGroup)
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
View(FL.salience.villageGroup)
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location') %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
View(FL.salience.villageGroup)
##
par(mar=c(0,0,0,0)) # for margins
FlowerPlot(FL.salience.villageGroup, "Items?")
AnthroTools:::FlowerPlot(FL.salience.villageGroup, "Items?") # In case the previous line doesn't work.
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items?") # In case the previous line doesn't work.
##
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items?") # In case the previous line doesn't work.
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
View(FL.salience.byCode)
rm(list = ls())
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
filterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','gender','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(filterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items?") # In case the previous line doesn't work.
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:") # In case the previous line doesn't work.
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
filterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','gender','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(filterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# initial package installations
install.packages("devtools")
install_github('alastair-JL/AnthroTools') # needs devtools library to work.
#
library("devtools")
library("tidyverse")
library("AnthroTools")
library("rstudioapi")
##########
# Reformat csv from odk-x default to anthotools freelisting style
##########
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
filterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','gender','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(filterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
######################
# AnthroTools part
# Salience Calculation
######################
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','gender','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList))
rm(list = ls())
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','gender','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
AnthroTools:::FlowerPlot(FL.salience.villageGroup, "?:")
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
rm(list = ls())
##########
# Reformat csv from odk-x default to anthotools freelisting style
##########
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
# TODO:: make sure gender
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
rm(list = ls())
#
library("devtools")
library("tidyverse")
library("AnthroTools")
library("rstudioapi")
##########
# Reformat csv from odk-x default to anthotools freelisting style
##########
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age, gender
# just leave ID, location and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList))
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
View(FL.csv.filtered)
View(FL.csv.original)
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList))
View(FL.csv.filtered)
View(FL.csv.tidy)
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(gender, .after = location)
View(FL.csv.filtered)
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(gender, .after = X_id)
View(FL.csv.filtered)
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(location gender, .after = X_id)
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id)
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# open CSV
FL <- selectFile()
rm(list = ls())
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
View(FL.csv.filtered)
# open CSV
FL <- selectFile()
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('age', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", "age", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
View(FL.csv.tidy)
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner', 'id')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", "age", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order))
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
View(FL.csv.original)
View(FL.csv.filtered)
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('id', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender,age), .after = X_id) # filter out uneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", "age", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
View(FL.csv.filtered)
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order)) %>%   na.omit
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order)) %>% na.if("") %>% na.omit
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order)) %>% na_if("") %>% na.omit
View(FL.csv.tidy)
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('id', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender,age), .after = X_id) # filter out unneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", "age", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order)) %>% na_if("") %>% na.omit
# read in CSV
FL.csv.original <- arrange(as_tibble(read.csv(FL)))
# NOTE:: CSV read in adds 'X' before '_columnName'
# filter out default columns starting with X_, age
# just leave ID, location, gender and items
csvFilterList <- c('id', 'X_form_id','X_locale','X_savepoint_type','X_savepoint_timestamp','X_savepoint_creator','X_deleted','X_data_etag_at_modification','X_default_access','X_group_modify','X_group_privileged','X_group_read_only','X_row_etag','X_row_owner')
FL.csv.filtered <- select(FL.csv.original, -c(csvFilterList)) %>% relocate(c(location,gender,age), .after = X_id) # filter out unneeded cols and reposition columns
# change columns names item_01:item_10 to 1:10
newcolnames <- c("Subj", "location", "gender", "age", 1:10 )
colnames(FL.csv.filtered) <- newcolnames
# tidy the data into columns: id, order, item
FL.csv.tidy <- as.data.frame(gather(FL.csv.filtered, key = "Order", value = "CODE", '1':'10'))
# Convert order column to numeric
FL.csv.tidy$Order <-  as.numeric(as.character(FL.csv.tidy$Order)) %>% na_if("") %>% na.omit
FL.salience <- CalculateSalience(FL.csv.tidy)
# DealWithDoubles handles double ups in single id's choices, in case they list the same thing twice
# code after '%>%' replaces data in rows with empty strings to NA, then removes them.
# the empty strings are due to not all 10 items being filled at interview time
FL.salience.byCode <- SalienceByCode(FL.salience, dealWithDoubles = "MAX") %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
# FlowerPlot example:
par(mar=c(0,0,0,0)) # for margins
AnthroTools:::FlowerPlot(FL.salience.byCode, "Items shared:")
# Grouping of location for salience
FL.salience.grouping <- CalculateSalience(FL.csv.tidy, GROUPING = 'location')
FL.salience.villageGroup <-SalienceByCode(FL.salience.grouping, dealWithDoubles = "MAX", GROUPING= "location")
FL.salience.villageGroup <- FL.salience.villageGroup %>%
# recode empty strings "" by NAs
na_if("") %>%
# remove NAs
na.omit
